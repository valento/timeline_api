{"version":3,"sources":["../../src/api/user.js"],"names":["app","repo","jwtOptions","expiresIn","get","req","res","token","params","tokenValidator","decoded","email","uid","promise","fetchOne","then","data","Promise","reject","Error","role","username","userlast","bday","gender","language","credit","rating","fb_id","crowdfund_id","verified","Object","assign","results","length","checked","free","message","post","uRole","body","credentials","password","user","console","log","validate","container","cradle","bcrypt","hash","insertOne","resolve","SECRET","authTokenSecret","jwt","sign","err","auth","new_user","compare","result"],"mappings":"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","sourcesContent":["import { tokenValidator, uRole } from '../server/middleware/index.js'\r\nimport bcrypt from 'bcrypt'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport default ({repo}, app) => {\r\n  const jwtOptions = { expiresIn: '240d' }\r\n// USER routes:\r\n// Email Confirmation:\r\n  app.get('/user/email/:token', (req,res) => {\r\n    const { token } = req.params\r\n    // Check token\r\n    // Response => token\r\n  })\r\n\r\n// Get User:\r\n  app.get('/user', tokenValidator, ( req,res ) => {\r\n  // Call DB:\r\n    const { email,uid } = req.decoded\r\n    res.promise( repo.fetchOne('*','user',{uid}).then( ([data]) => {\r\n      if(!data) return Promise.reject( new Error('No data...') )\r\n      const {role,username,userlast,bday,gender,language,credit,rating,fb_id,crowdfund_id,verified} = data\r\n      return Object.assign({},{role,username,userlast,bday,gender,language,credit,rating,fb_id,crowdfund_id,verified})\r\n    }))\r\n  })\r\n// Check User:\r\n  app.get('/check/:email', ( req,res ) => {\r\n  // Call DB:\r\n    const { email } = req.params\r\n    res.promise( repo.fetchOne(['username'],'user',{email})\r\n    .then( results => {\r\n        if(results.length) {\r\n          const [data] = results\r\n          return Object.assign({},{username: data.username},{ checked: true, free: false, message: 'This email is in use. Have a Password?' })\r\n        }\r\n        return { checked: true, free: true, message: 'Email is free for use. Insert a Password, please!' }\r\n      })\r\n    )\r\n  })\r\n\r\n/* === Handle User Signup, Auth, Login ============================== */\r\n// MAKE a USER\r\n// SignUp => Auth-token:\r\n  app.post('/user/auth', uRole, (req,res) => {\r\n    const { email,password } = req.body.credentials\r\n    const { role } = req\r\n    let user = Object.assign({},{email,password,role})\r\n    console.log(user)\r\n  // Validate user data:\r\n    const validate = req.container.cradle.validate\r\n    validate(user,'user')\r\n  // Make a hash:\r\n      .then( user => bcrypt.hash(password, 10) )\r\n      .then( hash => repo.insertOne('user',{...user, password: hash}) )\r\n      .then( () => res.promise(repo.fetchOne('*','user',{email}).then( ([data]) => {\r\n          if(!data) return Promise.reject( new Error('Apologies: DB lost that User :(') )\r\n          const { authTokenSecret:SECRET } = req.container.resolve('serverSettings')\r\n          const {uid,email,role} = data\r\n          return jwt.sign({email, uid, role}, SECRET, jwtOptions, (err,token) => {\r\n            return ({...data, auth: token, new_user: false})\r\n          })\r\n        })\r\n      ))\r\n  // Error Handling:\r\n      //.catch( error => {\r\n      //  Promise.reject(createError(500))\r\n      //})\r\n  })\r\n\r\n// OLD USER : NO AUTH-TOKEN\r\n// Full Login: Check credentials => auth-token\r\n  app.post('/user/login', (req,res) => {\r\n    const { email,password } = req.body.credentials\r\n  // Login: Check user exist => {user: auth.token, data: user.data}\r\n    res.promise( repo.fetchOne('*','user',{email})\r\n      .then(([data]) => {\r\n        if(!data) return Promise.reject( new Error('No user found!') )\r\n        const { password:hash, } = data\r\n        return bcrypt.compare(password,hash)\r\n        .then((result) => {\r\n            if(!data || !result) return Promise.reject(new Error('Wrong Credentials!'))\r\n\r\n            const { authTokenSecret:SECRET } = req.container.resolve('serverSettings')\r\n            const {uid,email,role} = data\r\n\r\n            const token = jwt.sign({email, uid, role}, SECRET, jwtOptions)\r\n            return ({...data, auth: token, new_user: false})\r\n\r\n        })\r\n      })\r\n    )\r\n\r\n    // Call DB:\r\n      //repo.createUser()\r\n    // HTTP response:\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nemail: 'mundrov@mail.com',\r\n  password: '$2b$10$ML6xPfqvLqH9rvOEX3X0gOrMfdyhOMnn3kYaaWfyVj0yAJM7vhPRe',\r\n  role: 256,\r\n  token: null,\r\n  uid: 4,\r\n  verified: 0,\r\n  status: 1,\r\n  username: null,\r\n  userlast: null,\r\n  bday: null,\r\n  gender: null,\r\n  language: null,\r\n  created_at: 2022-02-25T12:41:26.000Z,\r\n  lastlog: 2022-02-25T12:41:26.000Z,\r\n  credit: 10,\r\n  rating: null,\r\n*/\r\n"],"file":"user.js"}