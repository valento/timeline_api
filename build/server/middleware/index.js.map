{"version":3,"sources":["../../../src/server/middleware/index.js"],"names":["tokenValidator","req","res","next","token","get","container","resolve","secret","authTokenSecret","Error","decode","jwt","verify","err","decoded","console","log","e","handleErr","status","json","errors","global","message","handleRes","data","promiseWraper","promise","p","solve","then","Promise","uRole","email","body","credentials","match","input","role"],"mappings":";;;;;;;AAAA;;;;AAEA;AACO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,GAAF,EAAMC,GAAN,EAAUC,IAAV,EAAoB;AAChD,MAAMC,KAAK,GAAGH,GAAG,CAACI,GAAJ,CAAQ,eAAR,CAAd;;AACA,8BAAmCJ,GAAG,CAACK,SAAJ,CAAcC,OAAd,CAAsB,gBAAtB,CAAnC;AAAA,MAAwBC,MAAxB,yBAAQC,eAAR;;AAEA,MAAG,CAACL,KAAJ,EAAW;AACT,WAAOD,IAAI,CAAE,IAAIO,KAAJ,CAAU,mBAAV,CAAF,CAAX;AACD,GAFD,MAEO;AACL,QAAI;AACF,UAAMC,MAAM,GAAGC,yBAAIC,MAAJ,CAAWT,KAAX,EAAkBI,MAAlB,EAA0B,UAACM,GAAD,EAAKC,OAAL,EAAiB;AACtD,YAAGD,GAAH,EAAQ;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,iBAAOX,IAAI,CAAE,IAAIO,KAAJ,CAAU,yBAAV,CAAF,CAAX;AACD,SAHD,MAGO;AACLT,UAAAA,GAAG,CAACc,OAAJ,GAAcA,OAAd;AACA,iBAAOZ,IAAI,EAAX;AACD;AACJ,OARc,CAAf;AASD,KAVD,CAWA,OAAOe,CAAP,EAAU;AAAEf,MAAAA,IAAI,CAACe,CAAD,CAAJ;AAAS;AACtB;AACF,CApBM;;;;AAsBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAEjB,GAAF,EAAmB;AAAA,MAAZY,GAAY,uEAAR,EAAQ;AAAEZ,EAAAA,GAAG,CAACkB,MAAJ,CAAWN,GAAG,CAACM,MAAJ,IAAc,GAAzB,EAA8BC,IAA9B,CAAmC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAET,GAAG,CAACU;AAAd;AAAV,GAAnC;AAAyE,CAAhH;;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAEvB,GAAF,EAAOwB,IAAP,EAAiB;AAAExB,EAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsBK,IAAtB;AAA8B,CAAnE;;;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAAE1B,GAAF,EAAMC,GAAN,EAAUC,IAAV,EAAoB;AACrDa,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACAf,IAAAA,GAAG,CAAC0B,OAAJ,GAAc,UAAAC,CAAC,EAAI;AACjB,UAAIC,KAAJ;;AACA,UAAID,CAAC,CAACE,IAAF,IAAUF,CAAC,SAAf,EAAuB;AACrBb,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAa,QAAAA,KAAK,GAAGD,CAAR;AACD,OAHD,MAIK,IAAIA,CAAC,KAAK,UAAV,EAAuB;AAC1Bb,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAa,QAAAA,KAAK,GAAGE,OAAO,CAACzB,OAAR,GAAkBwB,IAAlB,CAAuB;AAAA,iBAAMF,CAAC,EAAP;AAAA,SAAvB,CAAR;AACD,OAHI,MAIA;AAAEC,QAAAA,KAAK,GAAGE,OAAO,CAACzB,OAAR,CAAgBsB,CAAhB,CAAR;AAA4B;;AAEnC,aAAOC,KAAK,CACTC,IADI,CACE,UAAAL,IAAI;AAAA,eAAID,SAAS,CAACvB,GAAD,EAAMwB,IAAN,CAAb;AAAA,OADN,WAEG,UAAAZ,GAAG;AAAA,eAAIK,SAAS,CAACjB,GAAD,EAAMY,GAAN,CAAb;AAAA,OAFN,CAAP;AAGD,KAfD;;AAgBA,WAAOX,IAAI,EAAX;AACD,GAnB4B;AAAA,CAAtB,C,CAqBP;;;;;AACO,IAAM8B,KAAK,GAAG,SAARA,KAAQ,CAAChC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACrC,MAAQ+B,KAAR,GAAkBjC,GAAG,CAACkC,IAAJ,CAASC,WAA3B,CAAQF,KAAR;;AACA,UAAQA,KAAR;AACE,SAAKA,KAAK,CAACG,KAAN,CAAY,UAAZ,EAAwBC,KAA7B;AACErC,MAAAA,GAAG,CAACsC,IAAJ,GAAW,EAAX;AACF;;AACA,SAAKL,KAAK,CAACG,KAAN,CAAY,SAAZ,EAAuBC,KAA5B;AACErC,MAAAA,GAAG,CAACsC,IAAJ,GAAW,CAAX;AACF;;AACA;AAAStC,MAAAA,GAAG,CAACsC,IAAJ,GAAW,GAAX;AAPX;;AASApC,EAAAA,IAAI;AACL,CAZM,C,CAcP","sourcesContent":["import jwt from 'jsonwebtoken'\r\n\r\n// Test and Decode Authorization token\r\nexport const tokenValidator = ( req,res,next ) => {\r\n  const token = req.get('Authorization')\r\n  const { authTokenSecret:secret } = req.container.resolve('serverSettings')\r\n\r\n  if(!token) {\r\n    return next( new Error('Missin\\' token...') )\r\n  } else {\r\n    try {\r\n      const decode = jwt.verify(token, secret, (err,decoded) => {\r\n          if(err) {\r\n            console.log(err)\r\n            return next( new Error('Unauthorized request...'))\r\n          } else {\r\n            req.decoded = decoded\r\n            return next()\r\n          }\r\n      })\r\n    }\r\n    catch (e) { next(e) }\r\n  }\r\n}\r\n\r\nexport const handleErr = ( res, err={} ) => { res.status(err.status || 500).json({ errors: { global: err.message } }) }\r\n\r\nexport const handleRes = ( res, data ) => { res.status(200).json( data ) }\r\n\r\nexport const promiseWraper = () => ( req,res,next ) => {\r\n  console.log('Promise Wrapper!')\r\n  res.promise = p => {\r\n    let solve\r\n    if( p.then && p.catch ){\r\n      console.log('Middleware fire a Promise')\r\n      solve = p\r\n    }\r\n    else if( p === 'function' ) {\r\n      console.log('Middlware fire a function')\r\n      solve = Promise.resolve().then(() => p())\r\n    }\r\n    else { solve = Promise.resolve(p) }\r\n\r\n    return solve\r\n      .then( data => handleRes(res, data) )\r\n      .catch( err => handleErr(res, err) )\r\n  }\r\n  return next()\r\n}\r\n\r\n// Assign role to user:\r\nexport const uRole = (req,res,next) => {\r\n  const { email } = req.body.credentials\r\n  switch (email) {\r\n    case email.match(/^tester./).input:\r\n      req.role = 64\r\n    break\r\n    case email.match(/^baker./).input:\r\n      req.role = 8\r\n    break\r\n    default: req.role = 256\r\n  }\r\n  next()\r\n}\r\n\r\n//export default Object.assign({},{tokenValidator})\r\n"],"file":"index.js"}