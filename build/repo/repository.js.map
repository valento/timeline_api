{"version":3,"sources":["../../src/repo/repository.js"],"names":["repository","container","db","cradle","database","query","conditions","inserts","queryPlaceholders","params","_placeholders","map","i","queryConditions","_condition","Object","keys","p","valuesArray","data","values","fetchOne","scope","table","length","Promise","reject","Error","concat","join","console","log","resolve","err","result","getCollection","condition","results","insertOne","input","Array","fill","disconnect","release","connect","assign"],"mappings":"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","sourcesContent":["const repository = container => {\r\n\r\n  const { database: db } = container.cradle\r\n  let query, conditions, inserts\r\n\r\n// Construct query:\r\n  const queryPlaceholders = (params) => {\r\n    let _placeholders = params.map( i => '?')\r\n    return _placeholders\r\n  }\r\n  const queryConditions = (params={}) => {\r\n    let _condition = Object.keys(params).map( p => `${p}=?`)\r\n    return _condition\r\n  }\r\n  const valuesArray = (data={}) => {\r\n    let values = Object.keys(params).map( p => `${p}=?`)\r\n    return _condition\r\n  }\r\n\r\n// Expose Object with Controlers:\r\n  return {\r\n    // SELECT [*] FROM [table] WHERE [condition1 {AND} condition2];\r\n    // SELECT one,two FROM [table] WHERE a=b AND c=d;\r\n    fetchOne: ( scope='*',table='',params={} ) => {\r\n  // Exit if not table provided:\r\n      if( !table.length ) return Promise.reject(new Error('Missing DB-table...'))\r\n  // Format conditions:\r\n      if(Object.keys(params).length || Object.keys(params).length>1) {\r\n        conditions = (' WHERE ').concat(queryConditions(params).join(' AND '))\r\n      } else {\r\n        conditions = Object.keys(params).length ? (' WHERE ').concat(`${Object.keys(params)[0]}=?`) : ''\r\n      }\r\n\r\n      query = `SELECT ${scope} FROM ${table}${conditions};`\r\nconsole.log(query)\r\n\r\n      return new Promise( (resolve,reject) => {\r\n        db.query(query, Object.values(params), (err,result) => {\r\n          if(err) reject(new Error(`DB error: ${err}`))\r\n          resolve(result)\r\n        })\r\n      })\r\n\r\n    },\r\n\r\n    getCollection: (scope='*',table='',params={}) => {\r\n  // Exit if not table provided:\r\n      if( !table.length ) return\r\n\r\n      query = `SELECT ${scope} FROM ${table} WHERE ${(typeof condition !== 'string') ? condition.join(' AND ') : condition}`\r\n\r\n      return new Promise( (resolve,reject) => {\r\n        db.query(table, (err,results) => {\r\n          if(err) reject(err)\r\n          resolve(result)\r\n        })\r\n      })\r\n\r\n    },\r\n\r\n    insertOne: (table='',data={}) => {\r\n      console.log('DB API input: ', data)\r\n  // Exit if not table provided:\r\n      if( !table.length || !Object.keys(data).length ) return\r\n      const input = new Array(Object.keys(data).length).fill('?')\r\n\r\n      query = `INSERT INTO ${table} (${Object.keys(data)}) VALUES (${input})`\r\nconsole.log(query)\r\n      return new Promise( (resolve,reject) =>{\r\n        db.query(query,Object.values(data), (err,result) => {\r\n          if(err) reject(new Error(`DB Error: ,${err}`))\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n\r\n    disconnect: () => {\r\n      db.release()\r\n    }\r\n  }\r\n}\r\n\r\nconst connect = container => {\r\n  return new Promise( (resolve,reject)=>{\r\n    resolve(repository(container))\r\n  })\r\n}\r\n\r\nexport default Object.assign({},{connect})\r\n"],"file":"repository.js"}