{"version":3,"sources":["../src/index.js"],"names":["mediator","EventEmmiter","process","on","err","promise","console","error","container","rep","repository","connect","then","repo","register","server","start","app","disconnect","log","cradle","serverSettings","port","di","init","emit"],"mappings":";;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA;AACA,IAAMA,QAAQ,GAAG,IAAIC,kBAAJ,EAAjB,C,CAEA;;AACAC,OAAO,CAACC,EAAR,CAAW,mBAAX,EAAgC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAChDC,EAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCH,GAArC;AACD,CAFD,E,CAIA;;AACAJ,QAAQ,CAACG,EAAT,CAAY,UAAZ,EAAwB,UAAAK,SAAS,EAAI;AACnC,MAAIC,GAAJ,CADmC,CAErC;;AACEC,yBAAWC,OAAX,CAAmBH,SAAnB,EACCI,IADD,CACO,UAAAC,IAAI,EAAI;AACbJ,IAAAA,GAAG,GAAGI,IAAN,CADa,CAEjB;;AACIL,IAAAA,SAAS,CAACM,QAAV,CAAmB;AACjBD,MAAAA,IAAI,EAAE,qBAAQA,IAAR;AADW,KAAnB,EAHa,CAMjB;;AACI,WAAOE,mBAAOC,KAAP,CAAaR,SAAb,CAAP;AACD,GATD,EAUCI,IAVD,CAUO,UAAAK,GAAG,EAAI;AACZA,IAAAA,GAAG,CAACd,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpBM,MAAAA,GAAG,CAACS,UAAJ,GADoB,CAE1B;AACM;AACD,KAJD;AAKAZ,IAAAA,OAAO,CAACa,GAAR,CAAY,qBAAZ,EAAmCX,SAAS,CAACY,MAAV,CAAiBC,cAAjB,CAAgCC,IAAnE;AACD,GAjBD,WAkBQ,UAAAlB,GAAG;AAAA,WAAIE,OAAO,CAACC,KAAR,CAAcH,GAAd,CAAJ;AAAA,GAlBX;AAmBD,CAtBD;AAuBAJ,QAAQ,CAACG,EAAT,CAAY,UAAZ,EAAwB,UAAAC,GAAG,EAAI;AAAEE,EAAAA,OAAO,CAACa,GAAR,CAAY,wBAAZ,EAAsCf,GAAtC;AAA4C,CAA7E,E,CAEA;;AACAmB,kBAAGC,IAAH,CAAQxB,QAAR;;AAEAA,QAAQ,CAACyB,IAAT,CAAc,MAAd","sourcesContent":["import { asValue } from 'awilix'\r\nimport EventEmmiter from 'events'\r\n\r\nimport di from './di/index.js'\r\nimport server from './server/index.js'\r\nimport repository from './repo/repository.js'\r\n\r\n// Configure an Event Notifier:\r\nconst mediator = new EventEmmiter()\r\n\r\n// Handle Errors:\r\nprocess.on('uncaughtRejection', (err, promise) => {\r\n  console.error('Unhandled Rejection', err)\r\n})\r\n\r\n// Set Event Emmiter:\r\nmediator.on('di.ready', container => {\r\n  let rep\r\n// init DB-API:\r\n  repository.connect(container)\r\n  .then( repo => {\r\n    rep = repo\r\n// register DB-API in DI-container:\r\n    container.register({\r\n      repo: asValue(repo)\r\n    })\r\n// Start Server with DI-container\r\n    return server.start(container)\r\n  })\r\n  .then( app => {\r\n    app.on('close', () => {\r\n      rep.disconnect()\r\n// or get repo from the container:\r\n      //container.cradle.database.disconnect()\r\n    })\r\n    console.log('Server started on: ', container.cradle.serverSettings.port)\r\n  })\r\n  .catch( err => console.error(err))\r\n})\r\nmediator.on('di.error', err => { console.log('DI failed because of: ', err) })\r\n\r\n// REBOOT Application:\r\ndi.init(mediator)\r\n\r\nmediator.emit('init')\r\n"],"file":"index.js"}